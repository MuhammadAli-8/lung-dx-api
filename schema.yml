openapi: 3.0.3
info:
  title: Lung Diagnosis API
  version: 1.0.0
  description: API for uploading and analyzing lung images with disease prediction
paths:
  /api/:
    get:
      operationId: api_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/diagnoses/:
    get:
      operationId: api_diagnoses_list
      description: View user's diagnosis history.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadedImage'
          description: ''
  /api/diagnoses/{id}/:
    get:
      operationId: api_diagnoses_retrieve
      description: View a single diagnosis.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedImage'
          description: ''
  /api/images/{id}/:
    delete:
      operationId: api_images_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/images/upload/:
    post:
      operationId: api_images_upload_create
      description: Upload an image for diagnosis.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UploadedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadedImage'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedImage'
          description: ''
  /api/login/:
    post:
      operationId: api_login_create
      description: Log in a user and return JWT tokens.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/logout/:
    post:
      operationId: api_logout_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/password-reset/:
    post:
      operationId: api_password_reset_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequest'
          description: ''
  /api/password-reset/confirm/:
    post:
      operationId: api_password_reset_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/profile/:
    get:
      operationId: api_profile_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_profile_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_profile_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/register/:
    post:
      operationId: api_register_create
      description: Register a new user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/stats/:
    get:
      operationId: api_stats_list
      description: View admin statistics.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminStats'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/upload/batch/:
    post:
      operationId: api_upload_batch_create
      description: Upload multiple images at once for diagnosis.
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchImageUpload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchImageUpload'
          application/json:
            schema:
              $ref: '#/components/schemas/BatchImageUpload'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchImageUpload'
          description: ''
components:
  schemas:
    AdminStats:
      type: object
      description: Serializer for AdminStats model.
      properties:
        date:
          type: string
          format: date
          readOnly: true
        total_checks:
          type: integer
          readOnly: true
        most_common_disease:
          type: string
          readOnly: true
        most_common_disease_count:
          type: integer
          readOnly: true
      required:
      - date
      - most_common_disease
      - most_common_disease_count
      - total_checks
    BatchImageUpload:
      type: object
      description: Serializer for handling multiple image uploads.
      properties:
        images:
          type: array
          items:
            type: string
          description: Select multiple image files for batch diagnosis
      required:
      - images
    BlankEnum:
      enum:
      - ''
    CustomTokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
      required:
      - email
      - password
    DiseaseTypeEnum:
      enum:
      - No Finding
      - Pneumonia
      - Pneumothorax
      - Effusion
      - Cardiomegaly
      type: string
      description: |-
        * `No Finding` - No Finding
        * `Pneumonia` - Pneumonia
        * `Pneumothorax` - Pneumothorax
        * `Effusion` - Effusion
        * `Cardiomegaly` - Cardiomegaly
    GenderEnum:
      enum:
      - M
      - F
      type: string
      description: |-
        * `M` - Male
        * `F` - Female
    NullEnum:
      enum:
      - null
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
          writeOnly: true
      required:
      - new_password
      - token
      - uid
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PatchedUserProfile:
      type: object
      properties:
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UploadedImage:
      type: object
      description: Serializer for UploadedImage model, including associated diagnosis.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        disease_type:
          allOf:
          - $ref: '#/components/schemas/DiseaseTypeEnum'
          readOnly: true
          description: |-
            Diagnosis result from ML model

            * `No Finding` - No Finding
            * `Pneumonia` - Pneumonia
            * `Pneumothorax` - Pneumothorax
            * `Effusion` - Effusion
            * `Cardiomegaly` - Cardiomegaly
      required:
      - created_at
      - disease_type
      - id
      - image
      - uploaded_at
      - user
    UserProfile:
      type: object
      properties:
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - password
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "B"
